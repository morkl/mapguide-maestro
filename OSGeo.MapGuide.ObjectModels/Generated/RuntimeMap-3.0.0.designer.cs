#pragma warning disable 1591, 0114, 0108
// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.3.0.2211
//    <NameSpace>OSGeo.MapGuide.ObjectModels.RuntimeMap</NameSpace><Collection>BindingList</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLasyLoading>False</EnableLasyLoading><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><AutomaticProperties>False</AutomaticProperties><DisableDebug>False</DisableDebug><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>False</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace OSGeo.MapGuide.ObjectModels.RuntimeMap.v3_0_0
{
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;


    /// <summary>
    /// Describes information about a Runtime Map, so that client applications can interact with it
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.2272")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class RuntimeMap : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string siteVersionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string mapDefinitionField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string tileSetDefinitionField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string tileWidthField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string tileHeightField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string backgroundColorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int displayDpiField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string iconMimeTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private CoordinateSystemType coordinateSystemField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Envelope extentsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<RuntimeMapGroup> groupField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<RuntimeMapLayer> layerField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<double> finiteDisplayScaleField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// The MapGuide Site Version
        /// </summary>
        public string SiteVersion {
            get {
                return this.siteVersionField;
            }
            set {
                if ((this.siteVersionField != null)) {
                    if ((siteVersionField.Equals(value) != true)) {
                        this.siteVersionField = value;
                        this.OnPropertyChanged("SiteVersion");
                    }
                }
                else {
                    this.siteVersionField = value;
                    this.OnPropertyChanged("SiteVersion");
                }
            }
        }
        
        /// <summary>
        /// The name of the runtime map. This is the value required for any mapagent operation that require a MAPNAME parameter
        /// </summary>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }
        
        /// <summary>
        /// The resource id of the Map Definition from which this runtime map was created from
        /// </summary>
        public string MapDefinition {
            get {
                return this.mapDefinitionField;
            }
            set {
                if ((this.mapDefinitionField != null)) {
                    if ((mapDefinitionField.Equals(value) != true)) {
                        this.mapDefinitionField = value;
                        this.OnPropertyChanged("MapDefinition");
                    }
                }
                else {
                    this.mapDefinitionField = value;
                    this.OnPropertyChanged("MapDefinition");
                }
            }
        }

        /// <summary>
        /// The resource id of the Tile Set Definition linked by the Map Definition from which this runtime map was created from
        /// </summary>
        public string TileSetDefinition
        {
            get
            {
                return this.tileSetDefinitionField;
            }
            set
            {
                if ((this.tileSetDefinitionField != null))
                {
                    if ((tileSetDefinitionField.Equals(value) != true))
                    {
                        this.tileSetDefinitionField = value;
                        this.OnPropertyChanged("TileSetDefinition");
                    }
                }
                else
                {
                    this.tileSetDefinitionField = value;
                    this.OnPropertyChanged("TileSetDefinition");
                }
            }
        }

        /// <summary>
        /// The tile width
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer")]
        public string TileWidth
        {
            get
            {
                return this.tileWidthField;
            }
            set
            {
                if ((this.tileWidthField != null))
                {
                    if ((tileWidthField.Equals(value) != true))
                    {
                        this.tileWidthField = value;
                        this.OnPropertyChanged("TileWidth");
                    }
                }
                else
                {
                    this.tileWidthField = value;
                    this.OnPropertyChanged("TileWidth");
                }
            }
        }

        /// <summary>
        /// The tile height
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer")]
        public string TileHeight
        {
            get
            {
                return this.tileHeightField;
            }
            set
            {
                if ((this.tileHeightField != null))
                {
                    if ((tileHeightField.Equals(value) != true))
                    {
                        this.tileHeightField = value;
                        this.OnPropertyChanged("TileHeight");
                    }
                }
                else
                {
                    this.tileHeightField = value;
                    this.OnPropertyChanged("TileHeight");
                }
            }
        }
        
        /// <summary>
        /// The map's background color in ARGB hex string format
        /// </summary>
        public string BackgroundColor {
            get {
                return this.backgroundColorField;
            }
            set {
                if ((this.backgroundColorField != null)) {
                    if ((backgroundColorField.Equals(value) != true)) {
                        this.backgroundColorField = value;
                        this.OnPropertyChanged("BackgroundColor");
                    }
                }
                else {
                    this.backgroundColorField = value;
                    this.OnPropertyChanged("BackgroundColor");
                }
            }
        }
        
        /// <summary>
        /// The number of dots per inch of the map display
        /// </summary>
        public int DisplayDpi {
            get {
                return this.displayDpiField;
            }
            set {
                if ((displayDpiField.Equals(value) != true))
                {
                    this.displayDpiField = value;
                    this.OnPropertyChanged("DisplayDpi");
                }
            }
        }
        
        /// <summary>
        /// The mime type of all inline icons
        /// </summary>
        public string IconMimeType {
            get {
                return this.iconMimeTypeField;
            }
            set {
                if ((this.iconMimeTypeField != null)) {
                    if ((iconMimeTypeField.Equals(value) != true)) {
                        this.iconMimeTypeField = value;
                        this.OnPropertyChanged("IconMimeType");
                    }
                }
                else {
                    this.iconMimeTypeField = value;
                    this.OnPropertyChanged("IconMimeType");
                }
            }
        }
        
        public CoordinateSystemType CoordinateSystem {
            get {
                return this.coordinateSystemField;
            }
            set {
                if ((this.coordinateSystemField != null)) {
                    if ((coordinateSystemField.Equals(value) != true)) {
                        this.coordinateSystemField = value;
                        this.OnPropertyChanged("CoordinateSystem");
                    }
                }
                else {
                    this.coordinateSystemField = value;
                    this.OnPropertyChanged("CoordinateSystem");
                }
            }
        }
        
        public Envelope Extents {
            get {
                return this.extentsField;
            }
            set {
                if ((this.extentsField != null)) {
                    if ((extentsField.Equals(value) != true)) {
                        this.extentsField = value;
                        this.OnPropertyChanged("Extents");
                    }
                }
                else {
                    this.extentsField = value;
                    this.OnPropertyChanged("Extents");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Group")]
        public List<RuntimeMapGroup> Group {
            get {
                return this.groupField;
            }
            set {
                if ((this.groupField != null)) {
                    if ((groupField.Equals(value) != true)) {
                        this.groupField = value;
                        this.OnPropertyChanged("Group");
                    }
                }
                else {
                    this.groupField = value;
                    this.OnPropertyChanged("Group");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Layer")]
        public List<RuntimeMapLayer> Layer {
            get {
                return this.layerField;
            }
            set {
                if ((this.layerField != null)) {
                    if ((layerField.Equals(value) != true)) {
                        this.layerField = value;
                        this.OnPropertyChanged("Layer");
                    }
                }
                else {
                    this.layerField = value;
                    this.OnPropertyChanged("Layer");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("FiniteDisplayScale")]
        public List<double> FiniteDisplayScale {
            get {
                return this.finiteDisplayScaleField;
            }
            set {
                if ((this.finiteDisplayScaleField != null)) {
                    if ((finiteDisplayScaleField.Equals(value) != true)) {
                        this.finiteDisplayScaleField = value;
                        this.OnPropertyChanged("FiniteDisplayScale");
                    }
                }
                else {
                    this.finiteDisplayScaleField = value;
                    this.OnPropertyChanged("FiniteDisplayScale");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RuntimeMap));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RuntimeMap object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an RuntimeMap object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RuntimeMap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RuntimeMap obj, out System.Exception exception) {
            exception = null;
            obj = default(RuntimeMap);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out RuntimeMap obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static RuntimeMap Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((RuntimeMap)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this RuntimeMap object
        /// </summary>
        public virtual RuntimeMap Clone() {
            return ((RuntimeMap)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.2272")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class CoordinateSystemType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string wktField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string mentorCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string epsgCodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double metersPerUnitField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string Wkt {
            get {
                return this.wktField;
            }
            set {
                if ((this.wktField != null)) {
                    if ((wktField.Equals(value) != true)) {
                        this.wktField = value;
                        this.OnPropertyChanged("Wkt");
                    }
                }
                else {
                    this.wktField = value;
                    this.OnPropertyChanged("Wkt");
                }
            }
        }
        
        public string MentorCode {
            get {
                return this.mentorCodeField;
            }
            set {
                if ((this.mentorCodeField != null)) {
                    if ((mentorCodeField.Equals(value) != true)) {
                        this.mentorCodeField = value;
                        this.OnPropertyChanged("MentorCode");
                    }
                }
                else {
                    this.mentorCodeField = value;
                    this.OnPropertyChanged("MentorCode");
                }
            }
        }
        
        public string EpsgCode {
            get {
                return this.epsgCodeField;
            }
            set {
                if ((this.epsgCodeField != null)) {
                    if ((epsgCodeField.Equals(value) != true)) {
                        this.epsgCodeField = value;
                        this.OnPropertyChanged("EpsgCode");
                    }
                }
                else {
                    this.epsgCodeField = value;
                    this.OnPropertyChanged("EpsgCode");
                }
            }
        }
        
        public double MetersPerUnit {
            get {
                return this.metersPerUnitField;
            }
            set {
                if ((metersPerUnitField.Equals(value) != true)) {
                    this.metersPerUnitField = value;
                    this.OnPropertyChanged("MetersPerUnit");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CoordinateSystemType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CoordinateSystemType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CoordinateSystemType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CoordinateSystemType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CoordinateSystemType obj, out System.Exception exception) {
            exception = null;
            obj = default(CoordinateSystemType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CoordinateSystemType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CoordinateSystemType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CoordinateSystemType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this CoordinateSystemType object
        /// </summary>
        public virtual CoordinateSystemType Clone() {
            return ((CoordinateSystemType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.2272")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class RuleInfo : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string legendLabelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string filterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string iconField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string LegendLabel {
            get {
                return this.legendLabelField;
            }
            set {
                if ((this.legendLabelField != null)) {
                    if ((legendLabelField.Equals(value) != true)) {
                        this.legendLabelField = value;
                        this.OnPropertyChanged("LegendLabel");
                    }
                }
                else {
                    this.legendLabelField = value;
                    this.OnPropertyChanged("LegendLabel");
                }
            }
        }
        
        public string Filter {
            get {
                return this.filterField;
            }
            set {
                if ((this.filterField != null)) {
                    if ((filterField.Equals(value) != true)) {
                        this.filterField = value;
                        this.OnPropertyChanged("Filter");
                    }
                }
                else {
                    this.filterField = value;
                    this.OnPropertyChanged("Filter");
                }
            }
        }
        
        public string Icon {
            get {
                return this.iconField;
            }
            set {
                if ((this.iconField != null)) {
                    if ((iconField.Equals(value) != true)) {
                        this.iconField = value;
                        this.OnPropertyChanged("Icon");
                    }
                }
                else {
                    this.iconField = value;
                    this.OnPropertyChanged("Icon");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RuleInfo));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RuleInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an RuleInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RuleInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RuleInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(RuleInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out RuleInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static RuleInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((RuleInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this RuleInfo object
        /// </summary>
        public virtual RuleInfo Clone() {
            return ((RuleInfo)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.2272")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class FeatureStyleInfo : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string typeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<RuleInfo> ruleField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                if ((this.typeField != null)) {
                    if ((typeField.Equals(value) != true)) {
                        this.typeField = value;
                        this.OnPropertyChanged("Type");
                    }
                }
                else {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Rule")]
        public List<RuleInfo> Rule {
            get {
                return this.ruleField;
            }
            set {
                if ((this.ruleField != null)) {
                    if ((ruleField.Equals(value) != true)) {
                        this.ruleField = value;
                        this.OnPropertyChanged("Rule");
                    }
                }
                else {
                    this.ruleField = value;
                    this.OnPropertyChanged("Rule");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FeatureStyleInfo));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FeatureStyleInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FeatureStyleInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FeatureStyleInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FeatureStyleInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(FeatureStyleInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FeatureStyleInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FeatureStyleInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FeatureStyleInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this FeatureStyleInfo object
        /// </summary>
        public virtual FeatureStyleInfo Clone() {
            return ((FeatureStyleInfo)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.2272")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ScaleRangeInfo : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double minScaleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double maxScaleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<FeatureStyleInfo> featureStyleField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public double MinScale {
            get {
                return this.minScaleField;
            }
            set {
                if ((minScaleField.Equals(value) != true)) {
                    this.minScaleField = value;
                    this.OnPropertyChanged("MinScale");
                }
            }
        }
        
        public double MaxScale {
            get {
                return this.maxScaleField;
            }
            set {
                if ((maxScaleField.Equals(value) != true)) {
                    this.maxScaleField = value;
                    this.OnPropertyChanged("MaxScale");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("FeatureStyle")]
        public List<FeatureStyleInfo> FeatureStyle {
            get {
                return this.featureStyleField;
            }
            set {
                if ((this.featureStyleField != null)) {
                    if ((featureStyleField.Equals(value) != true)) {
                        this.featureStyleField = value;
                        this.OnPropertyChanged("FeatureStyle");
                    }
                }
                else {
                    this.featureStyleField = value;
                    this.OnPropertyChanged("FeatureStyle");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ScaleRangeInfo));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ScaleRangeInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ScaleRangeInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ScaleRangeInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ScaleRangeInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(ScaleRangeInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ScaleRangeInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ScaleRangeInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ScaleRangeInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ScaleRangeInfo object
        /// </summary>
        public virtual ScaleRangeInfo Clone() {
            return ((ScaleRangeInfo)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.2272")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class FeatureSourceInfo : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string resourceIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string classNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string geometryField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string ResourceId {
            get {
                return this.resourceIdField;
            }
            set {
                if ((this.resourceIdField != null)) {
                    if ((resourceIdField.Equals(value) != true)) {
                        this.resourceIdField = value;
                        this.OnPropertyChanged("ResourceId");
                    }
                }
                else {
                    this.resourceIdField = value;
                    this.OnPropertyChanged("ResourceId");
                }
            }
        }
        
        public string ClassName {
            get {
                return this.classNameField;
            }
            set {
                if ((this.classNameField != null)) {
                    if ((classNameField.Equals(value) != true)) {
                        this.classNameField = value;
                        this.OnPropertyChanged("ClassName");
                    }
                }
                else {
                    this.classNameField = value;
                    this.OnPropertyChanged("ClassName");
                }
            }
        }
        
        public string Geometry {
            get {
                return this.geometryField;
            }
            set {
                if ((this.geometryField != null)) {
                    if ((geometryField.Equals(value) != true)) {
                        this.geometryField = value;
                        this.OnPropertyChanged("Geometry");
                    }
                }
                else {
                    this.geometryField = value;
                    this.OnPropertyChanged("Geometry");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FeatureSourceInfo));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FeatureSourceInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FeatureSourceInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FeatureSourceInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FeatureSourceInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(FeatureSourceInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FeatureSourceInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FeatureSourceInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FeatureSourceInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this FeatureSourceInfo object
        /// </summary>
        public virtual FeatureSourceInfo Clone() {
            return ((FeatureSourceInfo)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.2272")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class RuntimeMapLayer : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string typeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string legendLabelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string objectIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string parentIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool displayInLegendField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool expandInLegendField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool visibleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool actuallyVisibleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string layerDefinitionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private FeatureSourceInfo featureSourceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<ScaleRangeInfo> scaleRangeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// The name of the layer
        /// </summary>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }
        
        /// <summary>
        /// The type of this layer. Can be tiled or dynamic. Uses the value of MgLayerType
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                if ((this.typeField != null)) {
                    if ((typeField.Equals(value) != true)) {
                        this.typeField = value;
                        this.OnPropertyChanged("Type");
                    }
                }
                else {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }
        
        /// <summary>
        /// The layer's legend label
        /// </summary>
        public string LegendLabel {
            get {
                return this.legendLabelField;
            }
            set {
                if ((this.legendLabelField != null)) {
                    if ((legendLabelField.Equals(value) != true)) {
                        this.legendLabelField = value;
                        this.OnPropertyChanged("LegendLabel");
                    }
                }
                else {
                    this.legendLabelField = value;
                    this.OnPropertyChanged("LegendLabel");
                }
            }
        }
        
        /// <summary>
        /// The layer's unique id. Use this value for turning on/off this layer in a GETDYNAMICMAPOVERLAYIMAGE request
        /// </summary>
        public string ObjectId {
            get {
                return this.objectIdField;
            }
            set {
                if ((this.objectIdField != null)) {
                    if ((objectIdField.Equals(value) != true)) {
                        this.objectIdField = value;
                        this.OnPropertyChanged("ObjectId");
                    }
                }
                else {
                    this.objectIdField = value;
                    this.OnPropertyChanged("ObjectId");
                }
            }
        }
        
        /// <summary>
        /// The layer's parent group id. Use this value for determining parent-child relationships when building a layer/group hierarchy
        /// </summary>
        public string ParentId {
            get {
                return this.parentIdField;
            }
            set {
                if ((this.parentIdField != null)) {
                    if ((parentIdField.Equals(value) != true)) {
                        this.parentIdField = value;
                        this.OnPropertyChanged("ParentId");
                    }
                }
                else {
                    this.parentIdField = value;
                    this.OnPropertyChanged("ParentId");
                }
            }
        }
        
        /// <summary>
        /// Indicates whether this layer should be displayed in the legend
        /// </summary>
        public bool DisplayInLegend {
            get {
                return this.displayInLegendField;
            }
            set {
                if ((displayInLegendField.Equals(value) != true)) {
                    this.displayInLegendField = value;
                    this.OnPropertyChanged("DisplayInLegend");
                }
            }
        }
        
        /// <summary>
        /// Indicates whether this layer should be initially expanded (if layer is themed) in the legend
        /// </summary>
        public bool ExpandInLegend {
            get {
                return this.expandInLegendField;
            }
            set {
                if ((expandInLegendField.Equals(value) != true)) {
                    this.expandInLegendField = value;
                    this.OnPropertyChanged("ExpandInLegend");
                }
            }
        }
        
        /// <summary>
        /// Indicates whether this layer is potentially visible. Note that this may be true even though the layer is not visible. This will occur if the visible flag of one of the groups this layer is organized within is not visible or when the current viewScale property of the map is outside the scale ranges defined for this layer.
        /// </summary>
        public bool Visible {
            get {
                return this.visibleField;
            }
            set {
                if ((visibleField.Equals(value) != true)) {
                    this.visibleField = value;
                    this.OnPropertyChanged("Visible");
                }
            }
        }
        
        /// <summary>
        /// Indicates the actual visibility of the layer. The visibility depends on the visible property of the group, and the visible property of each group this group is organized within.
        /// </summary>
        public bool ActuallyVisible {
            get {
                return this.actuallyVisibleField;
            }
            set {
                if ((actuallyVisibleField.Equals(value) != true)) {
                    this.actuallyVisibleField = value;
                    this.OnPropertyChanged("ActuallyVisible");
                }
            }
        }
        
        /// <summary>
        /// The Layer Definition from which this runtime layer was created from
        /// </summary>
        public string LayerDefinition {
            get {
                return this.layerDefinitionField;
            }
            set {
                if ((this.layerDefinitionField != null)) {
                    if ((layerDefinitionField.Equals(value) != true)) {
                        this.layerDefinitionField = value;
                        this.OnPropertyChanged("LayerDefinition");
                    }
                }
                else {
                    this.layerDefinitionField = value;
                    this.OnPropertyChanged("LayerDefinition");
                }
            }
        }
        
        public FeatureSourceInfo FeatureSource {
            get {
                return this.featureSourceField;
            }
            set {
                if ((this.featureSourceField != null)) {
                    if ((featureSourceField.Equals(value) != true)) {
                        this.featureSourceField = value;
                        this.OnPropertyChanged("FeatureSource");
                    }
                }
                else {
                    this.featureSourceField = value;
                    this.OnPropertyChanged("FeatureSource");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ScaleRange")]
        public List<ScaleRangeInfo> ScaleRange {
            get {
                return this.scaleRangeField;
            }
            set {
                if ((this.scaleRangeField != null)) {
                    if ((scaleRangeField.Equals(value) != true)) {
                        this.scaleRangeField = value;
                        this.OnPropertyChanged("ScaleRange");
                    }
                }
                else {
                    this.scaleRangeField = value;
                    this.OnPropertyChanged("ScaleRange");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RuntimeMapLayer));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RuntimeMapLayer object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an RuntimeMapLayer object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RuntimeMapLayer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RuntimeMapLayer obj, out System.Exception exception) {
            exception = null;
            obj = default(RuntimeMapLayer);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out RuntimeMapLayer obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static RuntimeMapLayer Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((RuntimeMapLayer)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this RuntimeMapLayer object
        /// </summary>
        public virtual RuntimeMapLayer Clone() {
            return ((RuntimeMapLayer)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.2272")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class RuntimeMapGroup : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string typeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string legendLabelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string objectIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string parentIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool displayInLegendField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool expandInLegendField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool visibleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool actuallyVisibleField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// The name of the group
        /// </summary>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }
        
        /// <summary>
        /// The type of this group. Can be tiled or dynamic. Uses the value of MgLayerGroupType
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                if ((this.typeField != null)) {
                    if ((typeField.Equals(value) != true)) {
                        this.typeField = value;
                        this.OnPropertyChanged("Type");
                    }
                }
                else {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }
        
        /// <summary>
        /// The group's legend label
        /// </summary>
        public string LegendLabel {
            get {
                return this.legendLabelField;
            }
            set {
                if ((this.legendLabelField != null)) {
                    if ((legendLabelField.Equals(value) != true)) {
                        this.legendLabelField = value;
                        this.OnPropertyChanged("LegendLabel");
                    }
                }
                else {
                    this.legendLabelField = value;
                    this.OnPropertyChanged("LegendLabel");
                }
            }
        }
        
        /// <summary>
        /// The group's unique id. Use this value for turning on/off this group in a GETDYNAMICMAPOVERLAYIMAGE request
        /// </summary>
        public string ObjectId {
            get {
                return this.objectIdField;
            }
            set {
                if ((this.objectIdField != null)) {
                    if ((objectIdField.Equals(value) != true)) {
                        this.objectIdField = value;
                        this.OnPropertyChanged("ObjectId");
                    }
                }
                else {
                    this.objectIdField = value;
                    this.OnPropertyChanged("ObjectId");
                }
            }
        }
        
        /// <summary>
        /// The group's parent group id. Use this value for determining parent-child relationships when building a layer/group hierarchy
        /// </summary>
        public string ParentId {
            get {
                return this.parentIdField;
            }
            set {
                if ((this.parentIdField != null)) {
                    if ((parentIdField.Equals(value) != true)) {
                        this.parentIdField = value;
                        this.OnPropertyChanged("ParentId");
                    }
                }
                else {
                    this.parentIdField = value;
                    this.OnPropertyChanged("ParentId");
                }
            }
        }
        
        /// <summary>
        /// Indicates whether this group should be displayed in the legend
        /// </summary>
        public bool DisplayInLegend {
            get {
                return this.displayInLegendField;
            }
            set {
                if ((displayInLegendField.Equals(value) != true)) {
                    this.displayInLegendField = value;
                    this.OnPropertyChanged("DisplayInLegend");
                }
            }
        }
        
        /// <summary>
        /// Indicates whether this group should be initially expanded in the legend
        /// </summary>
        public bool ExpandInLegend {
            get {
                return this.expandInLegendField;
            }
            set {
                if ((expandInLegendField.Equals(value) != true)) {
                    this.expandInLegendField = value;
                    this.OnPropertyChanged("ExpandInLegend");
                }
            }
        }
        
        /// <summary>
        /// Indicates whether this group is potentially visible. Note that this may be true even though the group is not visible. This will occur if one of the groups this group is organized within is not visible.
        /// </summary>
        public bool Visible {
            get {
                return this.visibleField;
            }
            set {
                if ((visibleField.Equals(value) != true)) {
                    this.visibleField = value;
                    this.OnPropertyChanged("Visible");
                }
            }
        }
        
        /// <summary>
        /// Indicates the actual visibility of the group. The visibility depends on the visible property of the group, and the visible property of each group this group is organized within.
        /// </summary>
        public bool ActuallyVisible {
            get {
                return this.actuallyVisibleField;
            }
            set {
                if ((actuallyVisibleField.Equals(value) != true)) {
                    this.actuallyVisibleField = value;
                    this.OnPropertyChanged("ActuallyVisible");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RuntimeMapGroup));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RuntimeMapGroup object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an RuntimeMapGroup object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RuntimeMapGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RuntimeMapGroup obj, out System.Exception exception) {
            exception = null;
            obj = default(RuntimeMapGroup);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out RuntimeMapGroup obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static RuntimeMapGroup Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((RuntimeMapGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this RuntimeMapGroup object
        /// </summary>
        public virtual RuntimeMapGroup Clone() {
            return ((RuntimeMapGroup)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.2272")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class Envelope : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private EnvelopeLowerLeftCoordinate lowerLeftCoordinateField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private EnvelopeUpperRightCoordinate upperRightCoordinateField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public EnvelopeLowerLeftCoordinate LowerLeftCoordinate {
            get {
                return this.lowerLeftCoordinateField;
            }
            set {
                if ((this.lowerLeftCoordinateField != null)) {
                    if ((lowerLeftCoordinateField.Equals(value) != true)) {
                        this.lowerLeftCoordinateField = value;
                        this.OnPropertyChanged("LowerLeftCoordinate");
                    }
                }
                else {
                    this.lowerLeftCoordinateField = value;
                    this.OnPropertyChanged("LowerLeftCoordinate");
                }
            }
        }
        
        public EnvelopeUpperRightCoordinate UpperRightCoordinate {
            get {
                return this.upperRightCoordinateField;
            }
            set {
                if ((this.upperRightCoordinateField != null)) {
                    if ((upperRightCoordinateField.Equals(value) != true)) {
                        this.upperRightCoordinateField = value;
                        this.OnPropertyChanged("UpperRightCoordinate");
                    }
                }
                else {
                    this.upperRightCoordinateField = value;
                    this.OnPropertyChanged("UpperRightCoordinate");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Envelope));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Envelope object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Envelope object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Envelope object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Envelope obj, out System.Exception exception) {
            exception = null;
            obj = default(Envelope);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Envelope obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Envelope Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Envelope)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Envelope object
        /// </summary>
        public virtual Envelope Clone() {
            return ((Envelope)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.2272")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class EnvelopeLowerLeftCoordinate : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double xField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double yField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(DataType = "double")]
        public double X {
            get {
                return this.xField;
            }
            set {
                if ((xField.Equals(value) != true))
                {
                    this.xField = value;
                    this.OnPropertyChanged("X");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "double")]
        public double Y {
            get {
                return this.yField;
            }
            set {
                if ((yField.Equals(value) != true))
                {
                    this.yField = value;
                    this.OnPropertyChanged("Y");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(EnvelopeLowerLeftCoordinate));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EnvelopeLowerLeftCoordinate object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an EnvelopeLowerLeftCoordinate object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output EnvelopeLowerLeftCoordinate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out EnvelopeLowerLeftCoordinate obj, out System.Exception exception) {
            exception = null;
            obj = default(EnvelopeLowerLeftCoordinate);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out EnvelopeLowerLeftCoordinate obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static EnvelopeLowerLeftCoordinate Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((EnvelopeLowerLeftCoordinate)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this EnvelopeLowerLeftCoordinate object
        /// </summary>
        public virtual EnvelopeLowerLeftCoordinate Clone() {
            return ((EnvelopeLowerLeftCoordinate)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.2272")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class EnvelopeUpperRightCoordinate : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double xField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double yField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(DataType = "double")]
        public double X {
            get {
                return this.xField;
            }
            set {
                if ((xField.Equals(value) != true))
                {
                    this.xField = value;
                    this.OnPropertyChanged("X");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "double")]
        public double Y {
            get {
                return this.yField;
            }
            set {
                if ((yField.Equals(value) != true))
                {
                    this.yField = value;
                    this.OnPropertyChanged("Y");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(EnvelopeUpperRightCoordinate));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EnvelopeUpperRightCoordinate object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an EnvelopeUpperRightCoordinate object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output EnvelopeUpperRightCoordinate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out EnvelopeUpperRightCoordinate obj, out System.Exception exception) {
            exception = null;
            obj = default(EnvelopeUpperRightCoordinate);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out EnvelopeUpperRightCoordinate obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static EnvelopeUpperRightCoordinate Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((EnvelopeUpperRightCoordinate)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this EnvelopeUpperRightCoordinate object
        /// </summary>
        public virtual EnvelopeUpperRightCoordinate Clone() {
            return ((EnvelopeUpperRightCoordinate)(this.MemberwiseClone()));
        }
        #endregion
    }
}
