// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.32989
//    <NameSpace>OSGeo.MapGuide.ObjectModels.TileProviderList</NameSpace><Collection>BindingList</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>False</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace OSGeo.MapGuide.ObjectModels.TileProviderList {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;
    
    
    /// <summary>
    /// Root element that contains a collection of TileProvider elements.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class TileProviderList : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<TileProviderListTileProvider> tileProviderField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// Describes an installed tile provider.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("TileProvider")]
        public List<TileProviderListTileProvider> TileProvider {
            get {
                return this.tileProviderField;
            }
            set {
                if ((this.tileProviderField != null)) {
                    if ((tileProviderField.Equals(value) != true)) {
                        this.tileProviderField = value;
                        this.OnPropertyChanged("TileProvider");
                    }
                }
                else {
                    this.tileProviderField = value;
                    this.OnPropertyChanged("TileProvider");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TileProviderList));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TileProviderList object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TileProviderList object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TileProviderList object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TileProviderList obj, out System.Exception exception) {
            exception = null;
            obj = default(TileProviderList);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out TileProviderList obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static TileProviderList Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((TileProviderList)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this TileProviderList object
        /// </summary>
        public virtual TileProviderList Clone() {
            return ((TileProviderList)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    /// <summary>
    /// Describes an installed tile provider.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TileProviderListTileProvider : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string displayNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string descriptionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<TileProviderListTileProviderConnectionProperty> connectionPropertiesField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// Unique name of the feature provider. This name should be of the form <Company>.<Provider>.lt;Version>.
        /// </summary>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }
        
        /// <summary>
        /// A user friendly display name of the feature provider.
        /// </summary>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                if ((this.displayNameField != null)) {
                    if ((displayNameField.Equals(value) != true)) {
                        this.displayNameField = value;
                        this.OnPropertyChanged("DisplayName");
                    }
                }
                else {
                    this.displayNameField = value;
                    this.OnPropertyChanged("DisplayName");
                }
            }
        }
        
        /// <summary>
        /// A brief description of the feature provider.
        /// </summary>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                if ((this.descriptionField != null)) {
                    if ((descriptionField.Equals(value) != true)) {
                        this.descriptionField = value;
                        this.OnPropertyChanged("Description");
                    }
                }
                else {
                    this.descriptionField = value;
                    this.OnPropertyChanged("Description");
                }
            }
        }
        
        /// <summary>
        /// Connection properties for each provider with default values will be listed here.
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute("ConnectionProperty", IsNullable=false)]
        public List<TileProviderListTileProviderConnectionProperty> ConnectionProperties {
            get {
                return this.connectionPropertiesField;
            }
            set {
                if ((this.connectionPropertiesField != null)) {
                    if ((connectionPropertiesField.Equals(value) != true)) {
                        this.connectionPropertiesField = value;
                        this.OnPropertyChanged("ConnectionProperties");
                    }
                }
                else {
                    this.connectionPropertiesField = value;
                    this.OnPropertyChanged("ConnectionProperties");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TileProviderListTileProvider));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TileProviderListTileProvider object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TileProviderListTileProvider object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TileProviderListTileProvider object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TileProviderListTileProvider obj, out System.Exception exception) {
            exception = null;
            obj = default(TileProviderListTileProvider);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out TileProviderListTileProvider obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static TileProviderListTileProvider Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((TileProviderListTileProvider)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this TileProviderListTileProvider object
        /// </summary>
        public virtual TileProviderListTileProvider Clone() {
            return ((TileProviderListTileProvider)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TileProviderListTileProviderConnectionProperty : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string localizedNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string defaultValueField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> valueField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool requiredField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool protectedField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool enumerableField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string Name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }
        
        public string LocalizedName {
            get {
                return this.localizedNameField;
            }
            set {
                if ((this.localizedNameField != null)) {
                    if ((localizedNameField.Equals(value) != true)) {
                        this.localizedNameField = value;
                        this.OnPropertyChanged("LocalizedName");
                    }
                }
                else {
                    this.localizedNameField = value;
                    this.OnPropertyChanged("LocalizedName");
                }
            }
        }
        
        public string DefaultValue {
            get {
                return this.defaultValueField;
            }
            set {
                if ((this.defaultValueField != null)) {
                    if ((defaultValueField.Equals(value) != true)) {
                        this.defaultValueField = value;
                        this.OnPropertyChanged("DefaultValue");
                    }
                }
                else {
                    this.defaultValueField = value;
                    this.OnPropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Value")]
        public List<string> Value {
            get {
                return this.valueField;
            }
            set {
                if ((this.valueField != null)) {
                    if ((valueField.Equals(value) != true)) {
                        this.valueField = value;
                        this.OnPropertyChanged("Value");
                    }
                }
                else {
                    this.valueField = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Required {
            get {
                return this.requiredField;
            }
            set {
                if ((requiredField.Equals(value) != true)) {
                    this.requiredField = value;
                    this.OnPropertyChanged("Required");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Protected {
            get {
                return this.protectedField;
            }
            set {
                if ((protectedField.Equals(value) != true)) {
                    this.protectedField = value;
                    this.OnPropertyChanged("Protected");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Enumerable {
            get {
                return this.enumerableField;
            }
            set {
                if ((enumerableField.Equals(value) != true)) {
                    this.enumerableField = value;
                    this.OnPropertyChanged("Enumerable");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TileProviderListTileProviderConnectionProperty));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TileProviderListTileProviderConnectionProperty object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TileProviderListTileProviderConnectionProperty object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TileProviderListTileProviderConnectionProperty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TileProviderListTileProviderConnectionProperty obj, out System.Exception exception) {
            exception = null;
            obj = default(TileProviderListTileProviderConnectionProperty);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out TileProviderListTileProviderConnectionProperty obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static TileProviderListTileProviderConnectionProperty Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((TileProviderListTileProviderConnectionProperty)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this TileProviderListTileProviderConnectionProperty object
        /// </summary>
        public virtual TileProviderListTileProviderConnectionProperty Clone() {
            return ((TileProviderListTileProviderConnectionProperty)(this.MemberwiseClone()));
        }
        #endregion
    }
}
